---
export const prerender = false;

---

<div class="customer-details">
  <h2>Customer Details</h2>
  <div class="form-group">
    <label for="customerName">Name</label>
    <input 
      type="text" 
      id="customerName" 
      placeholder="John Doe" 
      value="John Doe"
    />
  </div>
  <div class="form-group">
    <label for="customerEmail">Email</label>
    <input 
      type="email" 
      id="customerEmail" 
      placeholder="john.doe@example.com"
      value="john.doe@example.com"
    />
  </div>
</div>

<div id="successToast" class="toast success">
  <span>The payment was successful</span>
</div>

<div id="failedToast" class="toast failed">
  <span>The payment failed, try again</span>
</div>

<form>
  <div class="container">
    <div id="flow-container"></div>
  </div>
  <span id="error-message"></span>
  <span id="successful-payment-message"></span>
</form>

<!-- Load the Checkout.com script first -->
<script is:inline src="https://checkout-web-components.checkout.com/index.js"
></script>
<script>
  import { appearance } from "./Appearance.astro";
  let checkoutInitialized = false;

  async function initCheckout() {
    if (checkoutInitialized) return;
    checkoutInitialized = true;

    try {
      const PUBLIC_KEY = import.meta.env.PUBLIC_KEY;
      console.log('1. Fetching payment session...');
    
      const response = await fetch('/create-payment-session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          customerName: (document.getElementById('customerName') as HTMLInputElement)?.value ?? '',
          customerEmail: (document.getElementById('customerEmail') as HTMLInputElement)?.value ?? ''
        })
      });

      const data = await response.json();
      console.log('2. Payment session data:', data);

      const checkout = await CheckoutWebComponents({
        publicKey: 'Bearer pk_sbox_dwuoyq5tj2pxyvl6dyimp5ffxib',
        environment: "sandbox",
        locale: "en-GB",
        paymentSession: data.paymentSession,
        appearance,
      });

      const flowComponent = checkout.create("flow");
      const flowContainer = document.getElementById("flow-container");
      if (flowContainer) {
        await flowComponent.mount(flowContainer);
      } else {
        throw new Error("Flow container element not found");
      }

    } catch (error) {
      console.error('Checkout Flow Error:', error);
      const errorMessageElement = document.getElementById("error-message");
      if (errorMessageElement) {
        errorMessageElement.textContent = 
          `Payment initialization failed: ${error instanceof Error ? error.message : String(error)}`;
        errorMessageElement.style.display = "block";
      }
    }
  }

  document.addEventListener('DOMContentLoaded', initCheckout);
</script>




<style>
  .customer-details {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background-color: #1F1F1F;
    border: 1px solid #68686C;
    border-radius: 8px;
  }

  h2 {
    color: #F9F9FB;
    font-size: 16px;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .form-group {
    margin-bottom: 1rem;
    margin-right: 1rem;
  }

  label {
    display: block;
    color: #828388;
    font-size: 14px;
    margin-bottom: 0.5rem;
  }

  input {
    width: 100%;
    padding: 12px;
    background-color: #0A0A0C;
    border: 1px solid #68686C;
    border-radius: 8px;
    color: #F9F9FB;
    font-family: 'Roboto Mono', monospace;
  }

  input:focus {
    outline: none;
    border-color: #5E48FC;
  }

  .toast {
    display: none;
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px;
    border-radius: 4px;
    z-index: 1000;
  }

  .toast.success {
    background-color: #4caf50;
    color: white;
  }

  .toast.failed {
    background-color: #f44336;
    color: white;
  }

  .toast.show {
    display: block;
    animation:
      fadeIn 0.5s,
      fadeOut 0.5s 4.5s;
  }

  #flow-container {
    width: 100%;
    min-height: 400px;
    margin: 20px 0;
  }

  #error-message {
    display: none;
    color: #f44336;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
</style>
